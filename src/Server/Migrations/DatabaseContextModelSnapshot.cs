// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Models.AssetCategoryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryParameterId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CategoryParameterId");

                    b.ToTable("AssetCategoryParameters");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UseForApi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7beb46fe-cf06-4952-a412-f4a694bc521e"),
                            Name = "Жилой комплекс",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("8699752c-0a1e-479a-9591-0115d3525d2b"),
                            Name = "Дом",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("b8683868-9dc3-4c81-aeae-60e048164067"),
                            Name = "Квартира",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("89c8b698-3b47-4dd6-ae5f-43dc0cd92fd0"),
                            Name = "Подъезд",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("54bfc828-d1f7-4f7f-a887-497200168625"),
                            Name = "Этаж",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("c3fd0053-bc6c-4298-a963-97d46832aae9"),
                            Name = "Игровая площадка",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("1a6f1bbe-e6ce-439d-9ee2-5f25607a0cca"),
                            Name = "Детсткая площадка",
                            UseForApi = true
                        });
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Models.AssetCategoryParameter", b =>
                {
                    b.HasOne("Models.Asset", "Asset")
                        .WithMany("Categories")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.CategoryParameter", "CategoryParameter")
                        .WithMany("AssetCategoryParameters")
                        .HasForeignKey("CategoryParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CategoryParameter");
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Parameter", "Parameter")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Models.Asset", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("CategoryParameters");
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.Navigation("AssetCategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Navigation("CategoryParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
