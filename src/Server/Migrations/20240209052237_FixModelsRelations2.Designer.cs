// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240209052237_FixModelsRelations2")]
    partial class FixModelsRelations2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid[]>("Images")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Models.AssetCategoryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CategoryParameterId");

                    b.ToTable("AssetCategoryParameters");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UseForApi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e19518a5-797e-46b1-b8c1-f0cbe9e800fc"),
                            Name = "Жилой комплекс",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("f7be5453-2cab-4638-aaf6-0a20102a77da"),
                            Name = "Дом",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("6cdb706f-3320-492a-b103-ba1ee48b61a2"),
                            Name = "Квартира",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("4c29fda8-5a57-4604-9f9f-2c684445a92b"),
                            Name = "Подъезд",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("fc52731f-dda1-47a5-98ea-fec15e25b4ce"),
                            Name = "Этаж",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("10f87ec1-1dea-417b-96b5-e587fb30be95"),
                            Name = "Игровая площадка",
                            UseForApi = true
                        },
                        new
                        {
                            Id = new Guid("cff366a8-61c0-40bd-ba7a-0164547b29ba"),
                            Name = "Детсткая площадка",
                            UseForApi = true
                        });
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Models.AssetCategoryParameter", b =>
                {
                    b.HasOne("Models.Asset", "Asset")
                        .WithMany("Categories")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.CategoryParameter", "CategoryParameter")
                        .WithMany("AssetCategoryParameters")
                        .HasForeignKey("CategoryParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CategoryParameter");
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Parameter", "Parameter")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Models.Asset", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("CategoryParameters");
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.Navigation("AssetCategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Navigation("CategoryParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
