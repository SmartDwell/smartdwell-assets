// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240208060457_FixModels")]
    partial class FixModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssetCategory", b =>
                {
                    b.Property<Guid>("AssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("AssetsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("AssetCategory");
                });

            modelBuilder.Entity("Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid[]>("Images")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UseForApi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c21aac11-ddfb-49d1-9bf1-71f44cb2ba1d"),
                            Name = "Жилой комплекс",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("7d3e79d2-b3db-44ec-803b-870359d5b5aa"),
                            Name = "Дом",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("3607ebb5-8fbe-470c-a8c7-f67d441ddbe0"),
                            Name = "Квартира",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("38b48a67-a5de-4c49-a17d-5ee2dc860586"),
                            Name = "Подъезд",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("6955f376-e26f-46ab-aa2c-68842b9ec626"),
                            Name = "Этаж",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("59fd629b-edc1-472c-bf19-dc419ba31bcf"),
                            Name = "Игровая площадка",
                            UseForApi = false
                        },
                        new
                        {
                            Id = new Guid("92ea86e1-f7d0-4c47-bc9f-a4915b57cfca"),
                            Name = "Детсткая площадка",
                            UseForApi = false
                        });
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("AssetCategory", b =>
                {
                    b.HasOne("Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.CategoryParameter", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Parameter", "Parameter")
                        .WithMany("CategoryParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("CategoryParameters");
                });

            modelBuilder.Entity("Models.Parameter", b =>
                {
                    b.Navigation("CategoryParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
